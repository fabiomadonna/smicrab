"""initial migration

Revision ID: 9469c8aee794
Revises: 
Create Date: 2025-07-01 23:47:52.558877

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9469c8aee794'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('datasets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('raster', sa.VARCHAR(length=255), nullable=False),
    sa.Column('variable_name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('from_timestamp', sa.TIMESTAMP(), nullable=False),
    sa.Column('to_timestamp', sa.TIMESTAMP(), nullable=False),
    sa.Column('longitude_from', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('longitude_to', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('latitude_from', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('latitude_to', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('frequency', sa.VARCHAR(length=50), nullable=False),
    sa.Column('grid_resolution', sa.VARCHAR(length=50), nullable=True),
    sa.Column('file_path', sa.Text(), nullable=True),
    sa.Column('file_size_mb', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_vars', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('time_coords', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_datasets_frequency', 'datasets', ['frequency'], unique=False)
    op.create_index('idx_datasets_from_timestamp', 'datasets', ['from_timestamp'], unique=False)
    op.create_index('idx_datasets_to_timestamp', 'datasets', ['to_timestamp'], unique=False)
    op.create_index('idx_datasets_variable_name', 'datasets', ['variable_name'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('analysis',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'in_progress', 'completed', 'error', name='analyzestatus'), nullable=False),
    sa.Column('current_module', sa.Enum('load_module', 'describe_module', 'estimate_module', 'validate_module', 'risk_map_module', name='modulename'), nullable=False),
    sa.Column('model_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('model_type', sa.Enum('Model1_Simple', 'Model2_Autoregressive', 'Model3_MB_User', 'Model4_UHU', 'Model5_RAB', 'Model6_HSDPD_user', name='modeltype'), nullable=True),
    sa.Column('coordinates', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_dynamic_output', sa.Boolean(), nullable=True),
    sa.Column('analysis_date', sa.TIMESTAMP(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analysis_id', 'analysis', ['id'], unique=False)
    op.create_index('idx_analysis_user_id', 'analysis', ['user_id'], unique=False)
    op.create_table('describe_module',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('current_step', sa.Enum('data_summary', 'correlation_analysis', 'distribution_analysis', 'time_series_plots', 'spatial_plots', 'export_results', name='describestep'), nullable=False),
    sa.Column('step_progress', sa.Enum('pending', 'in_progress', 'completed', 'error', name='stepprogressstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('data_reference', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analysis_id')
    )
    op.create_index('idx_describe_module_analysis_id', 'describe_module', ['analysis_id'], unique=False)
    op.create_table('estimate_module',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('current_step', sa.Enum('model_setup', 'parameter_estimation', 'convergence_check', 'results_summary', 'export_estimates', name='estimatestep'), nullable=False),
    sa.Column('step_progress', sa.Enum('pending', 'in_progress', 'completed', 'error', name='stepprogressstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('data_reference', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analysis_id')
    )
    op.create_index('idx_estimate_module_analysis_id', 'estimate_module', ['analysis_id'], unique=False)
    op.create_table('load_module',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('current_step', sa.Enum('start', 'model_config', 'build_dataframe', 'select_variable', 'download', 'done', name='loadstep'), nullable=False),
    sa.Column('step_progress', sa.Enum('pending', 'in_progress', 'completed', 'error', name='stepprogressstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('data_reference', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analysis_id')
    )
    op.create_index('idx_load_module_analysis_id', 'load_module', ['analysis_id'], unique=False)
    op.create_table('risk_map_module',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('current_step', sa.Enum('risk_calculation', 'spatial_mapping', 'threshold_analysis', 'risk_visualization', 'export_risk_maps', name='riskmapstep'), nullable=False),
    sa.Column('step_progress', sa.Enum('pending', 'in_progress', 'completed', 'error', name='stepprogressstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('data_reference', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analysis_id')
    )
    op.create_index('idx_risk_map_module_analysis_id', 'risk_map_module', ['analysis_id'], unique=False)
    op.create_table('validate_module',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('current_step', sa.Enum('residual_analysis', 'diagnostic_tests', 'model_performance', 'goodness_of_fit', 'validation_report', name='validatestep'), nullable=False),
    sa.Column('step_progress', sa.Enum('pending', 'in_progress', 'completed', 'error', name='stepprogressstatus'), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('data_reference', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('analysis_id')
    )
    op.create_index('idx_validate_module_analysis_id', 'validate_module', ['analysis_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_validate_module_analysis_id', table_name='validate_module')
    op.drop_table('validate_module')
    op.drop_index('idx_risk_map_module_analysis_id', table_name='risk_map_module')
    op.drop_table('risk_map_module')
    op.drop_index('idx_load_module_analysis_id', table_name='load_module')
    op.drop_table('load_module')
    op.drop_index('idx_estimate_module_analysis_id', table_name='estimate_module')
    op.drop_table('estimate_module')
    op.drop_index('idx_describe_module_analysis_id', table_name='describe_module')
    op.drop_table('describe_module')
    op.drop_index('idx_analysis_user_id', table_name='analysis')
    op.drop_index('idx_analysis_id', table_name='analysis')
    op.drop_table('analysis')
    op.drop_table('users')
    op.drop_index('idx_datasets_variable_name', table_name='datasets')
    op.drop_index('idx_datasets_to_timestamp', table_name='datasets')
    op.drop_index('idx_datasets_from_timestamp', table_name='datasets')
    op.drop_index('idx_datasets_frequency', table_name='datasets')
    op.drop_table('datasets')
    # ### end Alembic commands ###
